{"remainingRequest":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\YKB\\Desktop\\github\\manage-web\\src\\libs\\util.js","dependencies":[{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\src\\libs\\util.js","mtime":1562898218000},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Cookies from 'js-cookie'; // cookie保存的天数\n\nimport config from '@/config';\nimport { forEach, hasOneOf, objEqual } from '@/libs/tools';\nexport const TOKEN_KEY = 'token';\nexport const setToken = token => {\n  Cookies.set(TOKEN_KEY, token, {\n    expires: config.cookieExpires || 1\n  });\n};\nexport const getToken = () => {\n  const token = Cookies.get(TOKEN_KEY);\n  if (token && token != 'undefined') return token;else return false;\n};\nexport const hasChild = item => {\n  return item.children && item.children.length !== 0;\n};\n\nconst showThisMenuEle = (item, access) => {\n  if (item.meta && item.meta.access && item.meta.access.length) {\n    if (hasOneOf(item.meta.access, access)) return true;else return false;\n  } else return true;\n};\n/**\r\n * @param {Array} list 通过路由列表得到菜单列表\r\n * @returns {Array}\r\n */\n\n\nexport const getMenuByRouter = (list, access) => {\n  let res = [];\n  forEach(list, item => {\n    if (!item.meta || item.meta && !item.meta.hideInMenu) {\n      let obj = {\n        icon: item.meta && item.meta.icon || '',\n        name: item.name,\n        meta: item.meta\n      };\n\n      if ((hasChild(item) || item.meta && item.meta.showAlways) && showThisMenuEle(item, access)) {\n        obj.children = getMenuByRouter(item.children, access);\n      }\n\n      if (item.meta && item.meta.href) obj.href = item.meta.href;\n\n      if (showThisMenuEle(item, access)) {\n        if (hasChild(item) && !hasChild(obj)) {} else {\n          res.push(obj);\n        }\n      }\n    }\n  });\n  return res;\n};\n/**\r\n * @param {Array} routeMetched 当前路由metched\r\n * @returns {Array}\r\n */\n\nexport const getBreadCrumbList = (routeMetched, homeRoute) => {\n  let res = routeMetched.filter(item => {\n    return item.meta === undefined || !item.meta.hide;\n  }).map(item => {\n    let obj = {\n      icon: item.meta && item.meta.icon || '',\n      name: item.name,\n      meta: item.meta\n    };\n    return obj;\n  });\n  res = res.filter(item => {\n    return !item.meta.hideInMenu;\n  });\n  return [Object.assign(homeRoute, {\n    to: homeRoute.path\n  }), ...res];\n};\nexport const showTitle = (item, vm) => vm.$config.useI18n ? vm.$t(item.name) : item.meta && item.meta.title || item.name;\n/**\r\n * @description 本地存储和获取标签导航列表\r\n */\n\nexport const setTagNavListInLocalstorage = list => {\n  localStorage.tagNaveList = JSON.stringify(list);\n};\n/**\r\n * @returns {Array} 其中的每个元素只包含路由原信息中的name, path, meta三项\r\n */\n\nexport const getTagNavListFromLocalstorage = () => {\n  const list = localStorage.tagNaveList;\n  return list ? JSON.parse(list) : [];\n};\n/**\r\n * @param {Array} routers 路由列表数组\r\n * @description 用于找到路由列表中name为home的对象\r\n */\n\nexport const getHomeRoute = routers => {\n  let i = -1;\n  let len = routers.length;\n  let homeRoute = {};\n\n  while (++i < len) {\n    let item = routers[i];\n\n    if (item.children && item.children.length) {\n      let res = getHomeRoute(item.children);\n      if (res.name) return res;\n    } else {\n      if (item.name === 'home') homeRoute = item;\n    }\n  }\n\n  return homeRoute;\n};\n/**\r\n * @param {*} list 现有标签导航列表\r\n * @param {*} newRoute 新添加的路由原信息对象\r\n * @description 如果该newRoute已经存在则不再添加\r\n */\n\nexport const getNewTagList = (list, newRoute) => {\n  const {\n    name,\n    path,\n    meta\n  } = newRoute;\n  let newList = [...list];\n  if (newList.findIndex(item => item.name === name) >= 0) return newList;else newList.push({\n    name,\n    path,\n    meta\n  });\n  return newList;\n};\n/**\r\n * @param {*} access 用户权限数组，如 ['super_admin', 'admin']\r\n * @param {*} route 路由列表\r\n */\n\nconst hasAccess = (access, route) => {\n  if (route.meta && route.meta.access) return hasOneOf(access, route.meta.access);else return true;\n};\n/**\r\n * 权鉴\r\n * @param {*} name 即将跳转的路由name\r\n * @param {*} access 用户权限数组\r\n * @param {*} routes 路由列表\r\n * @description 用户是否可跳转到该页\r\n */\n\n\nexport const canTurnTo = (name, access, routes) => {\n  const routePermissionJudge = list => {\n    return list.some(item => {\n      if (item.children && item.children.length) {\n        return routePermissionJudge(item.children);\n      } else if (item.name === name) {\n        return hasAccess(access, item);\n      }\n    });\n  };\n\n  return routePermissionJudge(routes);\n};\n/**\r\n * @param {String} url\r\n * @description 从URL中解析参数\r\n */\n\nexport const getParams = url => {\n  const keyValueArr = url.split('?')[1].split('&');\n  let paramObj = {};\n  keyValueArr.forEach(item => {\n    const keyValue = item.split('=');\n    paramObj[keyValue[0]] = keyValue[1];\n  });\n  return paramObj;\n};\n/**\r\n * @param {Array} list 标签列表\r\n * @param {String} name 当前关闭的标签的name\r\n */\n\nexport const getNextRoute = (list, route) => {\n  let res = {};\n\n  if (list.length === 2) {\n    res = getHomeRoute(list);\n  } else {\n    const index = list.findIndex(item => routeEqual(item, route));\n    if (index === list.length - 1) res = list[list.length - 2];else res = list[index + 1];\n  }\n\n  return res;\n};\n/**\r\n * @param {Number} times 回调函数需要执行的次数\r\n * @param {Function} callback 回调函数\r\n */\n\nexport const doCustomTimes = (times, callback) => {\n  let i = -1;\n\n  while (++i < times) {\n    callback(i);\n  }\n};\n/**\r\n * @param {Object} file 从上传组件得到的文件对象\r\n * @returns {Promise} resolve参数是解析后的二维数组\r\n * @description 从Csv文件中解析出表格，解析成二维数组\r\n */\n\nexport const getArrayFromFile = file => {\n  let nameSplit = file.name.split('.');\n  let format = nameSplit[nameSplit.length - 1];\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader();\n    reader.readAsText(file); // 以文本格式读取\n\n    let arr = [];\n\n    reader.onload = function (evt) {\n      let data = evt.target.result; // 读到的数据\n\n      let pasteData = data.trim();\n      arr = pasteData.split(/[\\n\\u0085\\u2028\\u2029]|\\r\\n?/g).map(row => {\n        return row.split('\\t');\n      }).map(item => {\n        return item[0].split(',');\n      });\n      if (format === 'csv') resolve(arr);else reject(new Error('[Format Error]:你上传的不是Csv文件'));\n    };\n  });\n};\n/**\r\n * @param {Array} array 表格数据二维数组\r\n * @returns {Object} { columns, tableData }\r\n * @description 从二维数组中获取表头和表格数据，将第一行作为表头，用于在iView的表格中展示数据\r\n */\n\nexport const getTableDataFromArray = array => {\n  let columns = [];\n  let tableData = [];\n\n  if (array.length > 1) {\n    let titles = array.shift();\n    columns = titles.map(item => {\n      return {\n        title: item,\n        key: item\n      };\n    });\n    tableData = array.map(item => {\n      let res = {};\n      item.forEach((col, i) => {\n        res[titles[i]] = col;\n      });\n      return res;\n    });\n  }\n\n  return {\n    columns,\n    tableData\n  };\n};\nexport const findNodeUpper = (ele, tag) => {\n  if (ele.parentNode) {\n    if (ele.parentNode.tagName === tag.toUpperCase()) {\n      return ele.parentNode;\n    } else {\n      return findNodeUpper(ele.parentNode, tag);\n    }\n  }\n};\nexport const findNodeDownward = (ele, tag) => {\n  const tagName = tag.toUpperCase();\n\n  if (ele.childNodes.length) {\n    let i = -1;\n    let len = ele.childNodes.length;\n\n    while (++i < len) {\n      let child = ele.childNodes[i];\n      if (child.tagName === tagName) return child;else return findNodeDownward(child, tag);\n    }\n  }\n};\nexport const showByAccess = (access, canViewAccess) => {\n  return hasOneOf(canViewAccess, access);\n};\n/**\r\n * @description 根据name/params/query判断两个路由对象是否相等\r\n * @param {*} route1 路由对象\r\n * @param {*} route2 路由对象\r\n */\n\nexport const routeEqual = (route1, route2) => {\n  const params1 = route1.params || {};\n  const params2 = route2.params || {};\n  const query1 = route1.query || {};\n  const query2 = route2.query || {};\n  return route1.name === route2.name && objEqual(params1, params2) && objEqual(query1, query2);\n};\n/**\r\n * 判断打开的标签列表里是否已存在这个新添加的路由对象\r\n */\n\nexport const routeHasExist = (tagNavList, routeItem) => {\n  let len = tagNavList.length;\n  let res = false;\n  doCustomTimes(len, index => {\n    if (routeEqual(tagNavList[index], routeItem)) res = true;\n  });\n  return res;\n};",{"version":3,"sources":["C:\\Users\\YKB\\Desktop\\github\\manage-web\\src\\libs\\util.js"],"names":["Cookies","config","forEach","hasOneOf","objEqual","TOKEN_KEY","setToken","token","set","expires","cookieExpires","getToken","get","hasChild","item","children","length","showThisMenuEle","access","meta","getMenuByRouter","list","res","hideInMenu","obj","icon","name","showAlways","href","push","getBreadCrumbList","routeMetched","homeRoute","filter","undefined","hide","map","Object","assign","to","path","showTitle","vm","$config","useI18n","$t","title","setTagNavListInLocalstorage","localStorage","tagNaveList","JSON","stringify","getTagNavListFromLocalstorage","parse","getHomeRoute","routers","i","len","getNewTagList","newRoute","newList","findIndex","hasAccess","route","canTurnTo","routes","routePermissionJudge","some","getParams","url","keyValueArr","split","paramObj","keyValue","getNextRoute","index","routeEqual","doCustomTimes","times","callback","getArrayFromFile","file","nameSplit","format","Promise","resolve","reject","reader","FileReader","readAsText","arr","onload","evt","data","target","result","pasteData","trim","row","Error","getTableDataFromArray","array","columns","tableData","titles","shift","key","col","findNodeUpper","ele","tag","parentNode","tagName","toUpperCase","findNodeDownward","childNodes","child","showByAccess","canViewAccess","route1","route2","params1","params","params2","query1","query","query2","routeHasExist","tagNavList","routeItem"],"mappings":"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","sourcesContent":["import Cookies from 'js-cookie'\r\n// cookie保存的天数\r\nimport config from '@/config'\r\nimport { forEach, hasOneOf, objEqual } from '@/libs/tools'\r\n\r\nexport const TOKEN_KEY = 'token'\r\n\r\nexport const setToken = (token) => {\r\n  Cookies.set(TOKEN_KEY, token, {expires: config.cookieExpires || 1})\r\n}\r\n\r\nexport const getToken = () => {\r\n  const token = Cookies.get(TOKEN_KEY)\r\n  if (token && token != 'undefined') return token\r\n  else return false\r\n}\r\n\r\nexport const hasChild = (item) => {\r\n  return item.children && item.children.length !== 0\r\n}\r\n\r\nconst showThisMenuEle = (item, access) => {\r\n  if (item.meta && item.meta.access && item.meta.access.length) {\r\n    if (hasOneOf(item.meta.access, access)) return true\r\n    else return false\r\n  } else return true\r\n}\r\n/**\r\n * @param {Array} list 通过路由列表得到菜单列表\r\n * @returns {Array}\r\n */\r\nexport const getMenuByRouter = (list, access) => {\r\n  let res = []\r\n  forEach(list, item => {\r\n    if (!item.meta || (item.meta && !item.meta.hideInMenu)) {\r\n      let obj = {\r\n        icon: (item.meta && item.meta.icon) || '',\r\n        name: item.name,\r\n        meta: item.meta\r\n      }\r\n      if ((hasChild(item) || (item.meta && item.meta.showAlways)) && showThisMenuEle(item, access)) {\r\n        obj.children = getMenuByRouter(item.children, access)\r\n      }\r\n      if (item.meta && item.meta.href) obj.href = item.meta.href\r\n      if (showThisMenuEle(item, access)) {\r\n        if (hasChild(item) && !hasChild(obj)) {\r\n        } else {\r\n          res.push(obj)\r\n        }\r\n      }\r\n    }\r\n  })\r\n  return res\r\n}\r\n\r\n/**\r\n * @param {Array} routeMetched 当前路由metched\r\n * @returns {Array}\r\n */\r\nexport const getBreadCrumbList = (routeMetched, homeRoute) => {\r\n  let res = routeMetched.filter(item => {\r\n    return item.meta === undefined || !item.meta.hide\r\n  }).map(item => {\r\n    let obj = {\r\n      icon: (item.meta && item.meta.icon) || '',\r\n      name: item.name,\r\n      meta: item.meta\r\n    }\r\n    return obj\r\n  })\r\n  res = res.filter(item => {\r\n    return !item.meta.hideInMenu\r\n  })\r\n  return [Object.assign(homeRoute, { to: homeRoute.path }), ...res]\r\n}\r\n\r\nexport const showTitle = (item, vm) => vm.$config.useI18n ? vm.$t(item.name) : ((item.meta && item.meta.title) || item.name)\r\n\r\n/**\r\n * @description 本地存储和获取标签导航列表\r\n */\r\nexport const setTagNavListInLocalstorage = list => {\r\n  localStorage.tagNaveList = JSON.stringify(list)\r\n}\r\n/**\r\n * @returns {Array} 其中的每个元素只包含路由原信息中的name, path, meta三项\r\n */\r\nexport const getTagNavListFromLocalstorage = () => {\r\n  const list = localStorage.tagNaveList\r\n  return list ? JSON.parse(list) : []\r\n}\r\n\r\n/**\r\n * @param {Array} routers 路由列表数组\r\n * @description 用于找到路由列表中name为home的对象\r\n */\r\nexport const getHomeRoute = routers => {\r\n  let i = -1\r\n  let len = routers.length\r\n  let homeRoute = {}\r\n  while (++i < len) {\r\n    let item = routers[i]\r\n    if (item.children && item.children.length) {\r\n      let res = getHomeRoute(item.children)\r\n      if (res.name) return res\r\n    } else {\r\n      if (item.name === 'home') homeRoute = item\r\n    }\r\n  }\r\n  return homeRoute\r\n}\r\n\r\n/**\r\n * @param {*} list 现有标签导航列表\r\n * @param {*} newRoute 新添加的路由原信息对象\r\n * @description 如果该newRoute已经存在则不再添加\r\n */\r\nexport const getNewTagList = (list, newRoute) => {\r\n  const { name, path, meta } = newRoute\r\n  let newList = [...list]\r\n  if (newList.findIndex(item => item.name === name) >= 0) return newList\r\n  else newList.push({ name, path, meta })\r\n  return newList\r\n}\r\n\r\n/**\r\n * @param {*} access 用户权限数组，如 ['super_admin', 'admin']\r\n * @param {*} route 路由列表\r\n */\r\nconst hasAccess = (access, route) => {\r\n  if (route.meta && route.meta.access) return hasOneOf(access, route.meta.access)\r\n  else return true\r\n}\r\n\r\n/**\r\n * 权鉴\r\n * @param {*} name 即将跳转的路由name\r\n * @param {*} access 用户权限数组\r\n * @param {*} routes 路由列表\r\n * @description 用户是否可跳转到该页\r\n */\r\nexport const canTurnTo = (name, access, routes) => {\r\n  const routePermissionJudge = (list) => {\r\n    return list.some(item => {\r\n      if (item.children && item.children.length) {\r\n        return routePermissionJudge(item.children)\r\n      } else if (item.name === name) {\r\n        return hasAccess(access, item)\r\n      }\r\n    })\r\n  }\r\n\r\n  return routePermissionJudge(routes)\r\n}\r\n\r\n/**\r\n * @param {String} url\r\n * @description 从URL中解析参数\r\n */\r\nexport const getParams = url => {\r\n  const keyValueArr = url.split('?')[1].split('&')\r\n  let paramObj = {}\r\n  keyValueArr.forEach(item => {\r\n    const keyValue = item.split('=')\r\n    paramObj[keyValue[0]] = keyValue[1]\r\n  })\r\n  return paramObj\r\n}\r\n\r\n/**\r\n * @param {Array} list 标签列表\r\n * @param {String} name 当前关闭的标签的name\r\n */\r\nexport const getNextRoute = (list, route) => {\r\n  let res = {}\r\n  if (list.length === 2) {\r\n    res = getHomeRoute(list)\r\n  } else {\r\n    const index = list.findIndex(item => routeEqual(item, route))\r\n    if (index === list.length - 1) res = list[list.length - 2]\r\n    else res = list[index + 1]\r\n  }\r\n  return res\r\n}\r\n\r\n/**\r\n * @param {Number} times 回调函数需要执行的次数\r\n * @param {Function} callback 回调函数\r\n */\r\nexport const doCustomTimes = (times, callback) => {\r\n  let i = -1\r\n  while (++i < times) {\r\n    callback(i)\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Object} file 从上传组件得到的文件对象\r\n * @returns {Promise} resolve参数是解析后的二维数组\r\n * @description 从Csv文件中解析出表格，解析成二维数组\r\n */\r\nexport const getArrayFromFile = (file) => {\r\n  let nameSplit = file.name.split('.')\r\n  let format = nameSplit[nameSplit.length - 1]\r\n  return new Promise((resolve, reject) => {\r\n    let reader = new FileReader()\r\n    reader.readAsText(file) // 以文本格式读取\r\n    let arr = []\r\n    reader.onload = function (evt) {\r\n      let data = evt.target.result // 读到的数据\r\n      let pasteData = data.trim()\r\n      arr = pasteData.split((/[\\n\\u0085\\u2028\\u2029]|\\r\\n?/g)).map(row => {\r\n        return row.split('\\t')\r\n      }).map(item => {\r\n        return item[0].split(',')\r\n      })\r\n      if (format === 'csv') resolve(arr)\r\n      else reject(new Error('[Format Error]:你上传的不是Csv文件'))\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * @param {Array} array 表格数据二维数组\r\n * @returns {Object} { columns, tableData }\r\n * @description 从二维数组中获取表头和表格数据，将第一行作为表头，用于在iView的表格中展示数据\r\n */\r\nexport const getTableDataFromArray = (array) => {\r\n  let columns = []\r\n  let tableData = []\r\n  if (array.length > 1) {\r\n    let titles = array.shift()\r\n    columns = titles.map(item => {\r\n      return {\r\n        title: item,\r\n        key: item\r\n      }\r\n    })\r\n    tableData = array.map(item => {\r\n      let res = {}\r\n      item.forEach((col, i) => {\r\n        res[titles[i]] = col\r\n      })\r\n      return res\r\n    })\r\n  }\r\n  return {\r\n    columns,\r\n    tableData\r\n  }\r\n}\r\n\r\nexport const findNodeUpper = (ele, tag) => {\r\n  if (ele.parentNode) {\r\n    if (ele.parentNode.tagName === tag.toUpperCase()) {\r\n      return ele.parentNode\r\n    } else {\r\n      return findNodeUpper(ele.parentNode, tag)\r\n    }\r\n  }\r\n}\r\n\r\nexport const findNodeDownward = (ele, tag) => {\r\n  const tagName = tag.toUpperCase()\r\n  if (ele.childNodes.length) {\r\n    let i = -1\r\n    let len = ele.childNodes.length\r\n    while (++i < len) {\r\n      let child = ele.childNodes[i]\r\n      if (child.tagName === tagName) return child\r\n      else return findNodeDownward(child, tag)\r\n    }\r\n  }\r\n}\r\n\r\nexport const showByAccess = (access, canViewAccess) => {\r\n  return hasOneOf(canViewAccess, access)\r\n}\r\n\r\n/**\r\n * @description 根据name/params/query判断两个路由对象是否相等\r\n * @param {*} route1 路由对象\r\n * @param {*} route2 路由对象\r\n */\r\nexport const routeEqual = (route1, route2) => {\r\n  const params1 = route1.params || {}\r\n  const params2 = route2.params || {}\r\n  const query1 = route1.query || {}\r\n  const query2 = route2.query || {}\r\n  return (route1.name === route2.name) && objEqual(params1, params2) && objEqual(query1, query2)\r\n}\r\n\r\n/**\r\n * 判断打开的标签列表里是否已存在这个新添加的路由对象\r\n */\r\nexport const routeHasExist = (tagNavList, routeItem) => {\r\n  let len = tagNavList.length\r\n  let res = false\r\n  doCustomTimes(len, (index) => {\r\n    if (routeEqual(tagNavList[index], routeItem)) res = true\r\n  })\r\n  return res\r\n}\r\n"]}]}