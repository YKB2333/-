{"remainingRequest":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\YKB\\Desktop\\github\\manage-web\\src\\store\\module\\app.js","dependencies":[{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\src\\store\\module\\app.js","mtime":1562898218000},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { getBreadCrumbList, setTagNavListInLocalstorage, getMenuByRouter, getTagNavListFromLocalstorage, getHomeRoute, routeHasExist } from '@/libs/util';\nimport routers from '@/router/routers';\nexport default {\n  state: {\n    breadCrumbList: [],\n    tagNavList: [],\n    homeRoute: getHomeRoute(routers),\n    local: ''\n  },\n  getters: {\n    menuList: (state, getters, rootState) => getMenuByRouter(routers, rootState.user.access)\n  },\n  mutations: {\n    setBreadCrumb(state, routeMetched) {\n      state.breadCrumbList = getBreadCrumbList(routeMetched, state.homeRoute);\n    },\n\n    setTagNavList(state, list) {\n      if (list) {\n        state.tagNavList = [...list];\n        setTagNavListInLocalstorage([...list]);\n      } else state.tagNavList = getTagNavListFromLocalstorage();\n    },\n\n    addTag(state, {\n      route,\n      type = 'unshift'\n    }) {\n      if (!routeHasExist(state.tagNavList, route)) {\n        if (type === 'push') state.tagNavList.push(route);else {\n          if (route.name === 'home') state.tagNavList.unshift(route);else state.tagNavList.splice(1, 0, route);\n        }\n        setTagNavListInLocalstorage([...state.tagNavList]);\n      }\n    },\n\n    setLocal(state, lang) {\n      state.local = lang;\n    }\n\n  }\n};",{"version":3,"sources":["C:\\Users\\YKB\\Desktop\\github\\manage-web\\src\\store\\module\\app.js"],"names":["getBreadCrumbList","setTagNavListInLocalstorage","getMenuByRouter","getTagNavListFromLocalstorage","getHomeRoute","routeHasExist","routers","state","breadCrumbList","tagNavList","homeRoute","local","getters","menuList","rootState","user","access","mutations","setBreadCrumb","routeMetched","setTagNavList","list","addTag","route","type","push","name","unshift","splice","setLocal","lang"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,2BAA5B,EAAyDC,eAAzD,EAA0EC,6BAA1E,EAAyGC,YAAzG,EAAuHC,aAAvH,QAA4I,aAA5I;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,eAAe;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,cAAc,EAAE,EADX;AAELC,IAAAA,UAAU,EAAE,EAFP;AAGLC,IAAAA,SAAS,EAAEN,YAAY,CAACE,OAAD,CAHlB;AAILK,IAAAA,KAAK,EAAE;AAJF,GADM;AAObC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE,CAACN,KAAD,EAAQK,OAAR,EAAiBE,SAAjB,KAA+BZ,eAAe,CAACI,OAAD,EAAUQ,SAAS,CAACC,IAAV,CAAeC,MAAzB;AADjD,GAPI;AAUbC,EAAAA,SAAS,EAAE;AACTC,IAAAA,aAAa,CAAEX,KAAF,EAASY,YAAT,EAAuB;AAClCZ,MAAAA,KAAK,CAACC,cAAN,GAAuBR,iBAAiB,CAACmB,YAAD,EAAeZ,KAAK,CAACG,SAArB,CAAxC;AACD,KAHQ;;AAITU,IAAAA,aAAa,CAAEb,KAAF,EAASc,IAAT,EAAe;AAC1B,UAAIA,IAAJ,EAAU;AACRd,QAAAA,KAAK,CAACE,UAAN,GAAmB,CAAC,GAAGY,IAAJ,CAAnB;AACApB,QAAAA,2BAA2B,CAAC,CAAC,GAAGoB,IAAJ,CAAD,CAA3B;AACD,OAHD,MAGOd,KAAK,CAACE,UAAN,GAAmBN,6BAA6B,EAAhD;AACR,KATQ;;AAUTmB,IAAAA,MAAM,CAAEf,KAAF,EAAS;AAAEgB,MAAAA,KAAF;AAASC,MAAAA,IAAI,GAAG;AAAhB,KAAT,EAAsC;AAC1C,UAAI,CAACnB,aAAa,CAACE,KAAK,CAACE,UAAP,EAAmBc,KAAnB,CAAlB,EAA6C;AAC3C,YAAIC,IAAI,KAAK,MAAb,EAAqBjB,KAAK,CAACE,UAAN,CAAiBgB,IAAjB,CAAsBF,KAAtB,EAArB,KACK;AACH,cAAIA,KAAK,CAACG,IAAN,KAAe,MAAnB,EAA2BnB,KAAK,CAACE,UAAN,CAAiBkB,OAAjB,CAAyBJ,KAAzB,EAA3B,KACKhB,KAAK,CAACE,UAAN,CAAiBmB,MAAjB,CAAwB,CAAxB,EAA2B,CAA3B,EAA8BL,KAA9B;AACN;AACDtB,QAAAA,2BAA2B,CAAC,CAAC,GAAGM,KAAK,CAACE,UAAV,CAAD,CAA3B;AACD;AACF,KAnBQ;;AAoBToB,IAAAA,QAAQ,CAAEtB,KAAF,EAASuB,IAAT,EAAe;AACrBvB,MAAAA,KAAK,CAACI,KAAN,GAAcmB,IAAd;AACD;;AAtBQ;AAVE,CAAf","sourcesContent":["import { getBreadCrumbList, setTagNavListInLocalstorage, getMenuByRouter, getTagNavListFromLocalstorage, getHomeRoute, routeHasExist } from '@/libs/util'\r\nimport routers from '@/router/routers'\r\nexport default {\r\n  state: {\r\n    breadCrumbList: [],\r\n    tagNavList: [],\r\n    homeRoute: getHomeRoute(routers),\r\n    local: ''\r\n  },\r\n  getters: {\r\n    menuList: (state, getters, rootState) => getMenuByRouter(routers, rootState.user.access)\r\n  },\r\n  mutations: {\r\n    setBreadCrumb (state, routeMetched) {\r\n      state.breadCrumbList = getBreadCrumbList(routeMetched, state.homeRoute)\r\n    },\r\n    setTagNavList (state, list) {\r\n      if (list) {\r\n        state.tagNavList = [...list]\r\n        setTagNavListInLocalstorage([...list])\r\n      } else state.tagNavList = getTagNavListFromLocalstorage()\r\n    },\r\n    addTag (state, { route, type = 'unshift' }) {\r\n      if (!routeHasExist(state.tagNavList, route)) {\r\n        if (type === 'push') state.tagNavList.push(route)\r\n        else {\r\n          if (route.name === 'home') state.tagNavList.unshift(route)\r\n          else state.tagNavList.splice(1, 0, route)\r\n        }\r\n        setTagNavListInLocalstorage([...state.tagNavList])\r\n      }\r\n    },\r\n    setLocal (state, lang) {\r\n      state.local = lang\r\n    }\r\n  }\r\n}\r\n"]}]}