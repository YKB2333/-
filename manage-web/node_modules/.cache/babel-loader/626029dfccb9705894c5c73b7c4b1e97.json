{"remainingRequest":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\YKB\\Desktop\\github\\manage-web\\src\\view\\main\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\src\\view\\main\\main.vue","mtime":1562898218000},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport SideMenu from './components/side-menu';\nimport HeaderBar from './components/header-bar';\nimport TagsNav from './components/tags-nav';\nimport User from './components/user';\nimport Fullscreen from './components/fullscreen';\nimport Language from './components/language';\nimport { mapMutations, mapActions } from 'vuex';\nimport { getNewTagList, getNextRoute, routeEqual } from '@/libs/util';\nimport minLogo from '@/assets/images/pomelo-chook.png';\nimport maxLogo from '@/assets/images/logo.png';\nimport './main.less';\nexport default {\n  name: 'Main',\n  components: {\n    SideMenu,\n    HeaderBar,\n    Language,\n    TagsNav,\n    Fullscreen,\n    User\n  },\n\n  data() {\n    return {\n      collapsed: false,\n      minLogo,\n      maxLogo,\n      isFullscreen: false\n    };\n  },\n\n  computed: {\n    tagNavList() {\n      return this.$store.state.app.tagNavList;\n    },\n\n    tagRouter() {\n      return this.$store.state.app.tagRouter;\n    },\n\n    userAvator() {\n      return minLogo; //return this.$store.state.user.avatorImgPath\n    },\n\n    cacheList() {\n      return this.tagNavList.length ? this.tagNavList.filter(item => !(item.meta && item.meta.notCache)).map(item => item.name) : [];\n    },\n\n    menuList() {\n      return this.$store.getters.menuList;\n    },\n\n    local() {\n      return this.$store.state.app.local;\n    }\n\n  },\n  methods: { ...mapMutations(['setBreadCrumb', 'setTagNavList', 'addTag', 'setLocal']),\n    ...mapActions(['handleLogin']),\n\n    turnToPage(route) {\n      let {\n        name,\n        params,\n        query\n      } = {};\n      if (typeof route === 'string') name = route;else {\n        name = route.name;\n        params = route.params;\n        query = route.query;\n      }\n\n      if (name.indexOf('isTurnByHref_') > -1) {\n        window.open(name.split('_')[1]);\n        return;\n      }\n\n      this.$router.push({\n        name,\n        params,\n        query\n      });\n    },\n\n    handleCollapsedChange(state) {\n      this.collapsed = state;\n    },\n\n    handleCloseTag(res, type, route) {\n      let openName = '';\n\n      if (type === 'all') {\n        this.turnToPage('home');\n        openName = 'home';\n      } else if (routeEqual(this.$route, route)) {\n        if (type === 'others') {\n          openName = route.name;\n        } else {\n          const nextRoute = getNextRoute(this.tagNavList, route);\n          this.$router.push(nextRoute);\n          openName = nextRoute.name;\n        }\n      }\n\n      this.setTagNavList(res);\n      this.$refs.sideMenu.updateOpenName(openName);\n    },\n\n    handleClick(item) {\n      this.turnToPage(item);\n    }\n\n  },\n  watch: {\n    '$route'(newRoute) {\n      this.setBreadCrumb(newRoute.matched);\n      this.setTagNavList(getNewTagList(this.tagNavList, newRoute));\n    }\n\n  },\n\n  mounted() {\n    /**\n     * @description 初始化设置面包屑导航和标签导航\n     */\n    this.setTagNavList();\n    this.addTag({\n      route: this.$store.state.app.homeRoute\n    });\n    this.setBreadCrumb(this.$route.matched);\n  }\n\n};",{"version":3,"sources":["main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <Layout style=\"height: 100%\" class=\"main\">\r\n    <Sider hide-trigger collapsible :width=\"256\" :collapsed-width=\"64\" v-model=\"collapsed\" class=\"left-sider\"\r\n           :style=\"{overflow: 'hidden'}\">\r\n      <side-menu accordion ref=\"sideMenu\" :active-name=\"$route.name\" :collapsed=\"collapsed\" @on-select=\"turnToPage\"\r\n                 :menu-list=\"menuList\">\r\n        <!-- 需要放在菜单上面的内容，如Logo，写在side-menu标签内部，如下 -->\r\n        <div class=\"logo-con\">\r\n          <!--<img v-show=\"!collapsed\" :src=\"maxLogo\" key=\"max-logo\" />-->\r\n          <div v-show=\"!collapsed\" style=\"font-size: 24px;text-align: center\">\r\n            <img src=\"@/assets/images/pomelo-chook.png\" width=\"30\" height=\"30\">\r\n            <span>柚子鸡管理平台</span>\r\n          </div>\r\n          <div v-show=\"collapsed\" style=\"font-size: 24px\">\r\n            <img src=\"@/assets/images/pomelo-chook.png\" width=\"30\" height=\"30\">\r\n          </div>\r\n        </div>\r\n      </side-menu>\r\n    </Sider>\r\n    <Layout>\r\n      <Header class=\"header-con\">\r\n        <header-bar :collapsed=\"collapsed\" @on-coll-change=\"handleCollapsedChange\">\r\n          <user :user-avator=\"userAvator\"/>\r\n          <fullscreen v-model=\"isFullscreen\" style=\"margin-right: 10px;\"/>\r\n        </header-bar>\r\n      </Header>\r\n      <Content class=\"main-content-con\">\r\n        <Layout class=\"main-layout-con\">\r\n          <div class=\"tag-nav-wrapper\">\r\n            <tags-nav :value=\"$route\" @input=\"handleClick\" :list=\"tagNavList\" @on-close=\"handleCloseTag\"/>\r\n          </div>\r\n          <Content class=\"content-wrapper\">\r\n            <keep-alive :include=\"cacheList\">\r\n              <router-view/>\r\n            </keep-alive>\r\n          </Content>\r\n        </Layout>\r\n      </Content>\r\n    </Layout>\r\n  </Layout>\r\n</template>\r\n<style lang=\"less\">\r\n  @import \"../../assets/styles/common.less\";\r\n</style>\r\n<script>\r\n  import SideMenu from './components/side-menu'\r\n  import HeaderBar from './components/header-bar'\r\n  import TagsNav from './components/tags-nav'\r\n  import User from './components/user'\r\n  import Fullscreen from './components/fullscreen'\r\n  import Language from './components/language'\r\n  import {mapMutations, mapActions} from 'vuex'\r\n  import {getNewTagList, getNextRoute, routeEqual} from '@/libs/util'\r\n  import minLogo from '@/assets/images/pomelo-chook.png'\r\n  import maxLogo from '@/assets/images/logo.png'\r\n  import './main.less'\r\n\r\n  export default {\r\n    name: 'Main',\r\n    components: {\r\n      SideMenu,\r\n      HeaderBar,\r\n      Language,\r\n      TagsNav,\r\n      Fullscreen,\r\n      User\r\n    },\r\n    data() {\r\n      return {\r\n        collapsed: false,\r\n        minLogo,\r\n        maxLogo,\r\n        isFullscreen: false\r\n      }\r\n    },\r\n    computed: {\r\n      tagNavList() {\r\n        return this.$store.state.app.tagNavList\r\n      },\r\n      tagRouter() {\r\n        return this.$store.state.app.tagRouter\r\n      },\r\n      userAvator() {\r\n        return minLogo;\r\n        //return this.$store.state.user.avatorImgPath\r\n      },\r\n      cacheList() {\r\n        return this.tagNavList.length ? this.tagNavList.filter(item => !(item.meta && item.meta.notCache)).map(item => item.name) : []\r\n      },\r\n      menuList() {\r\n        return this.$store.getters.menuList\r\n      },\r\n      local() {\r\n        return this.$store.state.app.local\r\n      }\r\n    },\r\n    methods: {\r\n      ...mapMutations([\r\n        'setBreadCrumb',\r\n        'setTagNavList',\r\n        'addTag',\r\n        'setLocal'\r\n      ]),\r\n      ...mapActions([\r\n        'handleLogin'\r\n      ]),\r\n      turnToPage(route) {\r\n        let {name, params, query} = {}\r\n        if (typeof route === 'string') name = route\r\n        else {\r\n          name = route.name\r\n          params = route.params\r\n          query = route.query\r\n        }\r\n        if (name.indexOf('isTurnByHref_') > -1) {\r\n          window.open(name.split('_')[1])\r\n          return\r\n        }\r\n        this.$router.push({\r\n          name,\r\n          params,\r\n          query\r\n        })\r\n      },\r\n      handleCollapsedChange(state) {\r\n        this.collapsed = state\r\n      },\r\n      handleCloseTag(res, type, route) {\r\n        let openName = ''\r\n        if (type === 'all') {\r\n          this.turnToPage('home')\r\n          openName = 'home'\r\n        } else if (routeEqual(this.$route, route)) {\r\n          if (type === 'others') {\r\n            openName = route.name\r\n          } else {\r\n            const nextRoute = getNextRoute(this.tagNavList, route)\r\n            this.$router.push(nextRoute)\r\n            openName = nextRoute.name\r\n          }\r\n        }\r\n        this.setTagNavList(res)\r\n        this.$refs.sideMenu.updateOpenName(openName)\r\n      },\r\n      handleClick(item) {\r\n        this.turnToPage(item)\r\n      }\r\n    },\r\n    watch: {\r\n      '$route'(newRoute) {\r\n        this.setBreadCrumb(newRoute.matched)\r\n        this.setTagNavList(getNewTagList(this.tagNavList, newRoute))\r\n      }\r\n    },\r\n    mounted() {\r\n      /**\r\n       * @description 初始化设置面包屑导航和标签导航\r\n       */\r\n      this.setTagNavList()\r\n      this.addTag({\r\n        route: this.$store.state.app.homeRoute\r\n      })\r\n      this.setBreadCrumb(this.$route.matched)\r\n    }\r\n  }\r\n</script>\r\n"],"sourceRoot":"src/view/main"}]}