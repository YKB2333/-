{"remainingRequest":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\YKB\\Desktop\\github\\manage-web\\src\\router\\index.js","dependencies":[{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\src\\router\\index.js","mtime":1563155695356},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport Router from 'vue-router';\nimport routes from './routers';\nimport store from '@/store';\nimport iView from 'iview';\nimport { getToken, canTurnTo } from '@/libs/util';\nVue.use(Router);\nconst router = new Router({\n  routes,\n  mode: 'history'\n}); // const LOGIN_PAGE_NAME = 'login'\n// router.beforeEach((to, from, next) => {\n//   try {\n//     document.title = to.meta.title\n//   } catch (e) {\n//     console.warn('load title warning!')\n//   }\n//   iView.LoadingBar.start()\n//   const token = getToken()\n//   if (!token && to.name !== LOGIN_PAGE_NAME) {\n//     // 未登录且要跳转的页面不是登录页\n//     next({\n//       name: LOGIN_PAGE_NAME // 跳转到登录页\n//     })\n//   } else if (!token && to.name === LOGIN_PAGE_NAME) {\n//     // 未登陆且要跳转的页面是登录页\n//     next() // 跳转\n//   } else if (token && to.name === LOGIN_PAGE_NAME) {\n//     // 已登录且要跳转的页面是登录页\n//     next({\n//       name: 'home' // 跳转到home页\n//     })\n//   } else {\n//     store.dispatch('getUserInfo').then(user => {\n//       // 拉取用户信息，通过用户权限和跳转的页面的name来判断是否有权限访问;access必须是一个数组，如：['super_admin'] ['super_admin', 'admin']\n//       if (canTurnTo(to.name, user.access, routes)) {\n//         next()\n//       } else {\n//         // 有权限，可访问\n//         next({ replace: true, name: 'error_401' })\n//       } // 无权限，重定向到401页面\n//     })\n//   }\n// })\n// router.afterEach(to => {\n//   iView.LoadingBar.finish()\n//   window.scrollTo(0, 0)\n// })\n\nexport default router;",{"version":3,"sources":["C:\\Users\\YKB\\Desktop\\github\\manage-web\\src\\router\\index.js"],"names":["Vue","Router","routes","store","iView","getToken","canTurnTo","use","router","mode"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,aAApC;AAEAN,GAAG,CAACO,GAAJ,CAAQN,MAAR;AACA,MAAMO,MAAM,GAAG,IAAIP,MAAJ,CAAW;AACxBC,EAAAA,MADwB;AAExBO,EAAAA,IAAI,EAAE;AAFkB,CAAX,CAAf,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,eAAeD,MAAf","sourcesContent":["import Vue from 'vue'\r\nimport Router from 'vue-router'\r\nimport routes from './routers'\r\nimport store from '@/store'\r\nimport iView from 'iview'\r\nimport { getToken, canTurnTo } from '@/libs/util'\r\n\r\nVue.use(Router)\r\nconst router = new Router({\r\n  routes,\r\n  mode: 'history'\r\n})\r\n// const LOGIN_PAGE_NAME = 'login'\r\n// router.beforeEach((to, from, next) => {\r\n//   try {\r\n//     document.title = to.meta.title\r\n//   } catch (e) {\r\n//     console.warn('load title warning!')\r\n//   }\r\n//   iView.LoadingBar.start()\r\n//   const token = getToken()\r\n//   if (!token && to.name !== LOGIN_PAGE_NAME) {\r\n//     // 未登录且要跳转的页面不是登录页\r\n//     next({\r\n//       name: LOGIN_PAGE_NAME // 跳转到登录页\r\n//     })\r\n//   } else if (!token && to.name === LOGIN_PAGE_NAME) {\r\n//     // 未登陆且要跳转的页面是登录页\r\n//     next() // 跳转\r\n//   } else if (token && to.name === LOGIN_PAGE_NAME) {\r\n//     // 已登录且要跳转的页面是登录页\r\n//     next({\r\n//       name: 'home' // 跳转到home页\r\n//     })\r\n//   } else {\r\n//     store.dispatch('getUserInfo').then(user => {\r\n//       // 拉取用户信息，通过用户权限和跳转的页面的name来判断是否有权限访问;access必须是一个数组，如：['super_admin'] ['super_admin', 'admin']\r\n//       if (canTurnTo(to.name, user.access, routes)) {\r\n//         next()\r\n//       } else {\r\n//         // 有权限，可访问\r\n//         next({ replace: true, name: 'error_401' })\r\n//       } // 无权限，重定向到401页面\r\n//     })\r\n//   }\r\n// })\r\n\r\n// router.afterEach(to => {\r\n//   iView.LoadingBar.finish()\r\n//   window.scrollTo(0, 0)\r\n// })\r\n\r\nexport default router\r\n"]}]}