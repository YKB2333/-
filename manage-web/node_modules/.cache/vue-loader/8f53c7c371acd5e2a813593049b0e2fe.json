{"remainingRequest":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\YKB\\Desktop\\github\\manage-web\\src\\view\\home\\statistics.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\src\\view\\home\\statistics.vue","mtime":1563189073919},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\r\nimport { get, post } from \"../../libs/axios-cfg\";\r\nconst moment = require(\"moment\");\r\nconst DataSet = require(\"@antv/data-set\");\r\nconst G2 = require(\"@antv/g2\");\r\n\r\nexport default {\r\n//   name: \"statistics\",\r\n  data() {\r\n    return {\r\n      chart: null\r\n    };\r\n  },\r\n  props: {\r\n    charData: {\r\n      type: Array,\r\n      default: function() {\r\n        return {\r\n          data: []\r\n        };\r\n      }\r\n    },\r\n    id: String\r\n  },\r\n  // 如果使用serverData传过来的静态数据 请使用mounted()方法 并注释掉watch\r\n  mounted() {\r\n    this.drawChart();\r\n  },\r\n  // 监听API接口传过来的数据 使用watch  2018-08-21更新\r\n  // watch: {\r\n  // charData: function (val, oldVal) {    // 监听charData，当发生变化时，触发这个回调函数绘制图表\r\n  // console.log('new: %s, old: %s', val, oldVal);\r\n  // this.drawChart(val);\r\n  // }\r\n  //   },\r\n  methods: {\r\n    drawChart: function() {\r\n      // 2019.03.30 更新 destory方法已被废弃\r\n      // this.chart && this.chart.destory()\r\n      this.chart = new G2.Chart({\r\n        container: this.id,\r\n        width: 600,\r\n        height: 300\r\n      });\r\n      this.chart.source(this.charData);\r\n      this.chart.scale(\"value\", {\r\n        min: 0\r\n      });\r\n      this.chart.scale(\"year\", {\r\n        range: [0, 1]\r\n      });\r\n      this.chart.tooltip({\r\n        crosshairs: {\r\n          type: \"line\"\r\n        }\r\n      });\r\n      this.chart.line().position(\"year*value\");\r\n      this.chart\r\n        .point()\r\n        .position(\"year*value\")\r\n        .size(4)\r\n        .shape(\"circle\")\r\n        .style({\r\n          stroke: \"#fff\",\r\n          lineWidth: 1\r\n        });\r\n      this.chart.render();\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["statistics.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"statistics.vue","sourceRoot":"src/view/home","sourcesContent":["<template>\r\n  <div>\r\n    <div :id=\"id\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { get, post } from \"../../libs/axios-cfg\";\r\nconst moment = require(\"moment\");\r\nconst DataSet = require(\"@antv/data-set\");\r\nconst G2 = require(\"@antv/g2\");\r\n\r\nexport default {\r\n//   name: \"statistics\",\r\n  data() {\r\n    return {\r\n      chart: null\r\n    };\r\n  },\r\n  props: {\r\n    charData: {\r\n      type: Array,\r\n      default: function() {\r\n        return {\r\n          data: []\r\n        };\r\n      }\r\n    },\r\n    id: String\r\n  },\r\n  // 如果使用serverData传过来的静态数据 请使用mounted()方法 并注释掉watch\r\n  mounted() {\r\n    this.drawChart();\r\n  },\r\n  // 监听API接口传过来的数据 使用watch  2018-08-21更新\r\n  // watch: {\r\n  // charData: function (val, oldVal) {    // 监听charData，当发生变化时，触发这个回调函数绘制图表\r\n  // console.log('new: %s, old: %s', val, oldVal);\r\n  // this.drawChart(val);\r\n  // }\r\n  //   },\r\n  methods: {\r\n    drawChart: function() {\r\n      // 2019.03.30 更新 destory方法已被废弃\r\n      // this.chart && this.chart.destory()\r\n      this.chart = new G2.Chart({\r\n        container: this.id,\r\n        width: 600,\r\n        height: 300\r\n      });\r\n      this.chart.source(this.charData);\r\n      this.chart.scale(\"value\", {\r\n        min: 0\r\n      });\r\n      this.chart.scale(\"year\", {\r\n        range: [0, 1]\r\n      });\r\n      this.chart.tooltip({\r\n        crosshairs: {\r\n          type: \"line\"\r\n        }\r\n      });\r\n      this.chart.line().position(\"year*value\");\r\n      this.chart\r\n        .point()\r\n        .position(\"year*value\")\r\n        .size(4)\r\n        .shape(\"circle\")\r\n        .style({\r\n          stroke: \"#fff\",\r\n          lineWidth: 1\r\n        });\r\n      this.chart.render();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n"]}]}