{"remainingRequest":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\YKB\\Desktop\\github\\manage-web\\src\\view\\main\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\src\\view\\main\\main.vue","mtime":1562898218000},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\YKB\\Desktop\\github\\manage-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SideMenu from './components/side-menu'\nimport HeaderBar from './components/header-bar'\nimport TagsNav from './components/tags-nav'\nimport User from './components/user'\nimport Fullscreen from './components/fullscreen'\nimport Language from './components/language'\nimport {mapMutations, mapActions} from 'vuex'\nimport {getNewTagList, getNextRoute, routeEqual} from '@/libs/util'\nimport minLogo from '@/assets/images/pomelo-chook.png'\nimport maxLogo from '@/assets/images/logo.png'\nimport './main.less'\n\nexport default {\n  name: 'Main',\n  components: {\n    SideMenu,\n    HeaderBar,\n    Language,\n    TagsNav,\n    Fullscreen,\n    User\n  },\n  data() {\n    return {\n      collapsed: false,\n      minLogo,\n      maxLogo,\n      isFullscreen: false\n    }\n  },\n  computed: {\n    tagNavList() {\n      return this.$store.state.app.tagNavList\n    },\n    tagRouter() {\n      return this.$store.state.app.tagRouter\n    },\n    userAvator() {\n      return minLogo;\n      //return this.$store.state.user.avatorImgPath\n    },\n    cacheList() {\n      return this.tagNavList.length ? this.tagNavList.filter(item => !(item.meta && item.meta.notCache)).map(item => item.name) : []\n    },\n    menuList() {\n      return this.$store.getters.menuList\n    },\n    local() {\n      return this.$store.state.app.local\n    }\n  },\n  methods: {\n    ...mapMutations([\n      'setBreadCrumb',\n      'setTagNavList',\n      'addTag',\n      'setLocal'\n    ]),\n    ...mapActions([\n      'handleLogin'\n    ]),\n    turnToPage(route) {\n      let {name, params, query} = {}\n      if (typeof route === 'string') name = route\n      else {\n        name = route.name\n        params = route.params\n        query = route.query\n      }\n      if (name.indexOf('isTurnByHref_') > -1) {\n        window.open(name.split('_')[1])\n        return\n      }\n      this.$router.push({\n        name,\n        params,\n        query\n      })\n    },\n    handleCollapsedChange(state) {\n      this.collapsed = state\n    },\n    handleCloseTag(res, type, route) {\n      let openName = ''\n      if (type === 'all') {\n        this.turnToPage('home')\n        openName = 'home'\n      } else if (routeEqual(this.$route, route)) {\n        if (type === 'others') {\n          openName = route.name\n        } else {\n          const nextRoute = getNextRoute(this.tagNavList, route)\n          this.$router.push(nextRoute)\n          openName = nextRoute.name\n        }\n      }\n      this.setTagNavList(res)\n      this.$refs.sideMenu.updateOpenName(openName)\n    },\n    handleClick(item) {\n      this.turnToPage(item)\n    }\n  },\n  watch: {\n    '$route'(newRoute) {\n      this.setBreadCrumb(newRoute.matched)\n      this.setTagNavList(getNewTagList(this.tagNavList, newRoute))\n    }\n  },\n  mounted() {\n    /**\n     * @description 初始化设置面包屑导航和标签导航\n     */\n    this.setTagNavList()\n    this.addTag({\n      route: this.$store.state.app.homeRoute\n    })\n    this.setBreadCrumb(this.$route.matched)\n  }\n}\n",{"version":3,"sources":["main.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.vue","sourceRoot":"src/view/main","sourcesContent":["<template>\r\n  <Layout style=\"height: 100%\" class=\"main\">\r\n    <Sider hide-trigger collapsible :width=\"256\" :collapsed-width=\"64\" v-model=\"collapsed\" class=\"left-sider\"\r\n           :style=\"{overflow: 'hidden'}\">\r\n      <side-menu accordion ref=\"sideMenu\" :active-name=\"$route.name\" :collapsed=\"collapsed\" @on-select=\"turnToPage\"\r\n                 :menu-list=\"menuList\">\r\n        <!-- 需要放在菜单上面的内容，如Logo，写在side-menu标签内部，如下 -->\r\n        <div class=\"logo-con\">\r\n          <!--<img v-show=\"!collapsed\" :src=\"maxLogo\" key=\"max-logo\" />-->\r\n          <div v-show=\"!collapsed\" style=\"font-size: 24px;text-align: center\">\r\n            <img src=\"@/assets/images/pomelo-chook.png\" width=\"30\" height=\"30\">\r\n            <span>柚子鸡管理平台</span>\r\n          </div>\r\n          <div v-show=\"collapsed\" style=\"font-size: 24px\">\r\n            <img src=\"@/assets/images/pomelo-chook.png\" width=\"30\" height=\"30\">\r\n          </div>\r\n        </div>\r\n      </side-menu>\r\n    </Sider>\r\n    <Layout>\r\n      <Header class=\"header-con\">\r\n        <header-bar :collapsed=\"collapsed\" @on-coll-change=\"handleCollapsedChange\">\r\n          <user :user-avator=\"userAvator\"/>\r\n          <fullscreen v-model=\"isFullscreen\" style=\"margin-right: 10px;\"/>\r\n        </header-bar>\r\n      </Header>\r\n      <Content class=\"main-content-con\">\r\n        <Layout class=\"main-layout-con\">\r\n          <div class=\"tag-nav-wrapper\">\r\n            <tags-nav :value=\"$route\" @input=\"handleClick\" :list=\"tagNavList\" @on-close=\"handleCloseTag\"/>\r\n          </div>\r\n          <Content class=\"content-wrapper\">\r\n            <keep-alive :include=\"cacheList\">\r\n              <router-view/>\r\n            </keep-alive>\r\n          </Content>\r\n        </Layout>\r\n      </Content>\r\n    </Layout>\r\n  </Layout>\r\n</template>\r\n<style lang=\"less\">\r\n  @import \"../../assets/styles/common.less\";\r\n</style>\r\n<script>\r\n  import SideMenu from './components/side-menu'\r\n  import HeaderBar from './components/header-bar'\r\n  import TagsNav from './components/tags-nav'\r\n  import User from './components/user'\r\n  import Fullscreen from './components/fullscreen'\r\n  import Language from './components/language'\r\n  import {mapMutations, mapActions} from 'vuex'\r\n  import {getNewTagList, getNextRoute, routeEqual} from '@/libs/util'\r\n  import minLogo from '@/assets/images/pomelo-chook.png'\r\n  import maxLogo from '@/assets/images/logo.png'\r\n  import './main.less'\r\n\r\n  export default {\r\n    name: 'Main',\r\n    components: {\r\n      SideMenu,\r\n      HeaderBar,\r\n      Language,\r\n      TagsNav,\r\n      Fullscreen,\r\n      User\r\n    },\r\n    data() {\r\n      return {\r\n        collapsed: false,\r\n        minLogo,\r\n        maxLogo,\r\n        isFullscreen: false\r\n      }\r\n    },\r\n    computed: {\r\n      tagNavList() {\r\n        return this.$store.state.app.tagNavList\r\n      },\r\n      tagRouter() {\r\n        return this.$store.state.app.tagRouter\r\n      },\r\n      userAvator() {\r\n        return minLogo;\r\n        //return this.$store.state.user.avatorImgPath\r\n      },\r\n      cacheList() {\r\n        return this.tagNavList.length ? this.tagNavList.filter(item => !(item.meta && item.meta.notCache)).map(item => item.name) : []\r\n      },\r\n      menuList() {\r\n        return this.$store.getters.menuList\r\n      },\r\n      local() {\r\n        return this.$store.state.app.local\r\n      }\r\n    },\r\n    methods: {\r\n      ...mapMutations([\r\n        'setBreadCrumb',\r\n        'setTagNavList',\r\n        'addTag',\r\n        'setLocal'\r\n      ]),\r\n      ...mapActions([\r\n        'handleLogin'\r\n      ]),\r\n      turnToPage(route) {\r\n        let {name, params, query} = {}\r\n        if (typeof route === 'string') name = route\r\n        else {\r\n          name = route.name\r\n          params = route.params\r\n          query = route.query\r\n        }\r\n        if (name.indexOf('isTurnByHref_') > -1) {\r\n          window.open(name.split('_')[1])\r\n          return\r\n        }\r\n        this.$router.push({\r\n          name,\r\n          params,\r\n          query\r\n        })\r\n      },\r\n      handleCollapsedChange(state) {\r\n        this.collapsed = state\r\n      },\r\n      handleCloseTag(res, type, route) {\r\n        let openName = ''\r\n        if (type === 'all') {\r\n          this.turnToPage('home')\r\n          openName = 'home'\r\n        } else if (routeEqual(this.$route, route)) {\r\n          if (type === 'others') {\r\n            openName = route.name\r\n          } else {\r\n            const nextRoute = getNextRoute(this.tagNavList, route)\r\n            this.$router.push(nextRoute)\r\n            openName = nextRoute.name\r\n          }\r\n        }\r\n        this.setTagNavList(res)\r\n        this.$refs.sideMenu.updateOpenName(openName)\r\n      },\r\n      handleClick(item) {\r\n        this.turnToPage(item)\r\n      }\r\n    },\r\n    watch: {\r\n      '$route'(newRoute) {\r\n        this.setBreadCrumb(newRoute.matched)\r\n        this.setTagNavList(getNewTagList(this.tagNavList, newRoute))\r\n      }\r\n    },\r\n    mounted() {\r\n      /**\r\n       * @description 初始化设置面包屑导航和标签导航\r\n       */\r\n      this.setTagNavList()\r\n      this.addTag({\r\n        route: this.$store.state.app.homeRoute\r\n      })\r\n      this.setBreadCrumb(this.$route.matched)\r\n    }\r\n  }\r\n</script>\r\n"]}]}